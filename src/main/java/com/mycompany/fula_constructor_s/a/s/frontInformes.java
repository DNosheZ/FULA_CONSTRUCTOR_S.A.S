/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.fula_constructor_s.a.s;

/**
 *
 * @author Windows
 */
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import java.io.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.time.LocalDate;
import javax.swing.ImageIcon;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.PDFRenderer;

/**
 *
 * @author RyZen 5 Pro
 */
public class frontInformes extends javax.swing.JFrame {

    // Definir estilos de fuente
    private Font titleFont = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD, BaseColor.DARK_GRAY);
    private Font normalFont = new Font(Font.FontFamily.HELVETICA, 10, Font.NORMAL, BaseColor.DARK_GRAY);
    private Font normalBoldFont = new Font(Font.FontFamily.HELVETICA, 10, Font.BOLD, BaseColor.DARK_GRAY);

    private ImageIcon image;
    private Icon icon;
    private String userName;
    private Informe informe;
    private String Cliente, numInforme, fechaInicio, fechaFin, ubicacion, justificacion, actividades, nameRes, numRes;
    private File[] files;
    private HashMap<String, File[]> servicios = new HashMap<>();

    private SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");

    /**
     *
     * @param userName
     */
    public frontInformes(String userName) {
        initComponents();
        this.informe = new Informe();
        this.cargarClientes(cbxCliente, "Clientes/clientes.txt");
        this.userName = userName;
        this.setResizable(false);
        this.setLogo(imgLogo, "src\\main\\java\\com\\mycompany\\fula_constructor_s\\a\\s\\img/Recurso 2.png");
        this.setInfo(lblToday);

    }

    /**
     *
     */
    public frontInformes() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCalendar1 = new com.toedter.calendar.JCalendar();
        dateInicio = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        imgLogo = new javax.swing.JLabel();
        lblToday = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtNumInforme = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        dateFin = new com.toedter.calendar.JDateChooser();
        jLabel14 = new javax.swing.JLabel();
        txtUbicacion = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtJustificacion = new javax.swing.JTextArea();
        txtActividades = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        txtServicio = new javax.swing.JTextField();
        paneScroll = new javax.swing.JScrollPane();
        paneServices = new javax.swing.JPanel();
        cbxCliente = new javax.swing.JComboBox<>();
        jLabel19 = new javax.swing.JLabel();
        txtNameRes = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        txtNumRes = new javax.swing.JTextField();
        paneActivitys1 = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        menuArchivo = new javax.swing.JMenu();
        mNewInforme = new javax.swing.JMenu();
        mSaveInforme = new javax.swing.JMenu();
        mDownloadPDF = new javax.swing.JMenu();
        mPreview = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        mCreateClient = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        dateInicio.setForeground(new java.awt.Color(150, 17, 52));
        dateInicio.setDateFormatString("dd/MM/yyyy");

        jLabel7.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(150, 17, 52));
        jLabel7.setText("INFORME DE OBRA");

        jLabel10.setText(getName());
        jLabel10.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        lblToday.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblToday.setForeground(new java.awt.Color(150, 17, 52));
        lblToday.setText("fechadehoy");

        jLabel11.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(150, 17, 52));
        jLabel11.setText("Informe de obra número:");

        txtNumInforme.setForeground(new java.awt.Color(150, 17, 52));

        jLabel12.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(150, 17, 52));
        jLabel12.setText("Fecha de inicio");

        jLabel13.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(150, 17, 52));
        jLabel13.setText("Fecha de finalización");

        dateFin.setForeground(new java.awt.Color(150, 17, 52));
        dateFin.setDateFormatString("dd/MM/yyyy");

        jLabel14.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(150, 17, 52));
        jLabel14.setText("Ubicación de la obra");

        txtUbicacion.setForeground(new java.awt.Color(150, 17, 52));

        jLabel15.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(150, 17, 52));
        jLabel15.setText("Actividades");

        jLabel16.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(150, 17, 52));
        jLabel16.setText("Nombre del responsable");

        txtJustificacion.setColumns(20);
        txtJustificacion.setForeground(new java.awt.Color(150, 17, 52));
        txtJustificacion.setRows(5);
        jScrollPane3.setViewportView(txtJustificacion);

        txtActividades.setForeground(new java.awt.Color(150, 17, 52));

        jLabel17.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(150, 17, 52));
        jLabel17.setText("Cliente");

        jLabel18.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(150, 17, 52));
        jLabel18.setText("Descripción de la actividad");

        txtServicio.setForeground(new java.awt.Color(150, 17, 52));

        paneServices.setLayout(new java.awt.GridLayout(0, 1));
        paneScroll.setViewportView(paneServices);

        cbxCliente.setBackground(new java.awt.Color(255, 254, 255));
        cbxCliente.setForeground(new java.awt.Color(150, 17, 52));
        cbxCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar cliente" }));

        jLabel19.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(150, 17, 52));
        jLabel19.setText("Justificación de la obra");

        txtNameRes.setForeground(new java.awt.Color(150, 17, 52));

        jLabel20.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(150, 17, 52));
        jLabel20.setText("Número del responsable");

        txtNumRes.setForeground(new java.awt.Color(150, 17, 52));

        paneActivitys1.setLayout(new java.awt.GridLayout(1, 0, 3, 12));

        btnAdd.setBackground(new java.awt.Color(255, 254, 255));
        btnAdd.setForeground(new java.awt.Color(150, 17, 52));
        btnAdd.setText("Agregar");
        btnAdd.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(150, 17, 52), 2, true));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        paneActivitys1.add(btnAdd);

        btnUpdate.setBackground(new java.awt.Color(255, 254, 255));
        btnUpdate.setForeground(new java.awt.Color(150, 17, 52));
        btnUpdate.setText("Actualizar");
        btnUpdate.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(150, 17, 52), 2, true));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        paneActivitys1.add(btnUpdate);

        btnDelete.setBackground(new java.awt.Color(255, 254, 255));
        btnDelete.setForeground(new java.awt.Color(150, 17, 52));
        btnDelete.setText("Eliminar");
        btnDelete.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(150, 17, 52), 2, true));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        paneActivitys1.add(btnDelete);

        jSeparator1.setForeground(new java.awt.Color(150, 17, 52));

        jMenu2.setText("Salir");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        menuArchivo.setText("Archivo");

        mNewInforme.setText("Nuevo informe");
        mNewInforme.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mNewInformeMouseClicked(evt);
            }
        });
        menuArchivo.add(mNewInforme);

        mSaveInforme.setText("Guardar informe");
        mSaveInforme.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mSaveInformeMouseClicked(evt);
            }
        });
        menuArchivo.add(mSaveInforme);

        mDownloadPDF.setText("Descargar en PDF");
        mDownloadPDF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mDownloadPDFMouseClicked(evt);
            }
        });
        menuArchivo.add(mDownloadPDF);

        mPreview.setText("Ver vista previa");
        mPreview.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mPreviewMouseClicked(evt);
            }
        });
        menuArchivo.add(mPreview);

        jMenu5.setText("Enviar informe por e-mail");
        menuArchivo.add(jMenu5);

        jMenuBar1.add(menuArchivo);

        jMenu1.setText("Herramientas");

        mCreateClient.setText("Crear cliente");
        mCreateClient.setToolTipText("");
        mCreateClient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mCreateClientMouseClicked(evt);
            }
        });
        jMenu1.add(mCreateClient);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(207, 207, 207)
                .addComponent(jLabel10))
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(imgLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7)
                                .addGap(353, 353, 353))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(237, 237, 237)
                                .addComponent(lblToday)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtServicio, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(paneActivitys1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(470, 470, 470)
                                .addComponent(jLabel15)
                                .addGap(18, 18, 18)
                                .addComponent(txtActividades, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel19)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel11)
                                            .addComponent(jLabel14))
                                        .addGap(28, 28, 28)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtUbicacion, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                                            .addComponent(txtNumInforme, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                                            .addComponent(cbxCliente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addComponent(jLabel17)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel16)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                                        .addComponent(txtNameRes, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel20)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtNumRes, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel13)
                                            .addComponent(jLabel12))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(dateInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(dateFin, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addComponent(jLabel18)
                            .addComponent(jSeparator1)
                            .addComponent(paneScroll, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addContainerGap(74, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblToday))
                    .addComponent(imgLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(cbxCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(txtNumInforme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtUbicacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNameRes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16)
                            .addComponent(jLabel20)
                            .addComponent(txtNumRes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(dateInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(dateFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(txtActividades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(31, 31, 31)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel18)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(paneActivitys1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtServicio, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(paneScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addService(String service) {

        JLabel lblService = new JLabel();

        if (!service.isEmpty() && !this.servicios.containsKey(service)) {
            File[] file = selectFiles();
            this.servicios.put(service, file);

            lblService.setText(service + " : " + "(" + file.length + " archivos adjuntos)");
            this.paneServices.add(lblService);

            txtServicio.setText("");

        } else {
            JOptionPane.showMessageDialog(null, "EL servicio ya existe o esta vacio");
        }

    }

    private File[] selectFiles() {
        File[] files;
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(true);
        fileChooser.setDialogTitle("Seleccionar Imágenes");
        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos de Imagen", "jpg", "png", "jpeg"));

        int userSelection = fileChooser.showOpenDialog(null);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            files = fileChooser.getSelectedFiles();
            return files;
        }

        return null;
    }

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed

        addService(txtServicio.getText().trim());

        paneScroll.revalidate();

    }//GEN-LAST:event_btnAddActionPerformed

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        // TODO add your handling code here:
        UsersView view = new UsersView(this.userName);
        view.setVisible(true);
        this.hide();
    }//GEN-LAST:event_jMenu2MouseClicked

    public void ConfirmSave() {
        Icon iconoArchivo = UIManager.getIcon("FileView.fileIcon");

        // Mostrar cuadro de diálogo de confirmación
        int opcion = JOptionPane.showConfirmDialog(
                null,
                "¿Deseas guardar el informe?",
                "Confirmación",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                iconoArchivo
        );

        // Comprobar si el usuario ha presionado "OK"
        if (opcion == JOptionPane.OK_OPTION) {
            // Aquí va la lógica para guardar la información
            saveInforme();
        } else {
            // Si presiona "Cancel", simplemente cierra el cuadro de diálogo
            System.out.println("Operación cancelada.");
        }
    }

    public void ConfirmSaveR() {
        Icon iconoArchivo = UIManager.getIcon("FileView.fileIcon");

        // Mostrar cuadro de diálogo de confirmación
        int opcion = JOptionPane.showConfirmDialog(
                null,
                "¿Existen campos vacios, deseas guardar el informe aun asi?",
                "Confirmación",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                iconoArchivo
        );

        // Comprobar si el usuario ha presionado "OK"
        if (opcion == JOptionPane.OK_OPTION) {
            // Aquí va la lógica para guardar la información
            saveInforme();
        } else {
            // Si presiona "Cancel", simplemente cierra el cuadro de diálogo
            System.out.println("Operación cancelada.");
        }
    }

    public void saveInforme() {
        // Generar el nombre del archivo único (puedes usar numInforme o un timestamp)
        String nombreArchivo = "informe_" + numInforme + "_" + Cliente + ".txt";

        try {
            try ( // Crear el FileWriter
                    FileWriter writer = new FileWriter("Informes/" + nombreArchivo, true)) {
                PrintWriter pw = new PrintWriter(writer);
                // Escribir los atributos principales separados por |
                pw.println(Cliente + "|" + numInforme + "|" + fechaInicio + "|" + fechaFin + "|" + ubicacion + "|"
                        + justificacion + "|" + actividades + "|" + nameRes + "|" + numRes + "|" + "SV");
                // Recorrer el HashMap y escribir las claves y archivos
                for (String clave : servicios.keySet()) {
                    pw.print(clave);  // Escribir la clave

                    // Escribir los archivos asociados a la clave
                    for (File archivo : servicios.get(clave)) {
                        writer.write("|" + archivo.getAbsolutePath());  // Escribir la ruta del archivo
                    }

                    pw.print("\n");  // Nueva línea para cada clave
                }
                // Cerrar el escritor
            }
            System.out.println("Informe guardado como: " + nombreArchivo);
        } catch (IOException e) {
            System.out.println("Ocurrió un error al guardar el informe.");
            e.printStackTrace();
        }
    }

    public void setInfo() {

        this.Cliente = (String) cbxCliente.getSelectedItem();
        this.numInforme = txtNumInforme.getText();
        this.fechaInicio = formato.format(dateInicio.getDate());
        this.fechaFin = formato.format(dateFin.getDate());
        this.ubicacion = txtUbicacion.getText();
        this.justificacion = txtJustificacion.getText();
        this.actividades = txtActividades.getText();
        this.nameRes = txtNameRes.getText();
        this.numRes = txtNumRes.getText();
    }

    // Método para cargar las razones sociales desde el archivo txt
    public void cargarClientes(JComboBox<String> comboBox, String filePath) {
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String linea;

            while ((linea = br.readLine()) != null) {
                // Dividimos la línea por comas (,) asumiendo ese formato en el archivo
                String[] partes = linea.split(";");

                // Asumimos que la razón social es el tercer valor (índice 2)
                String razonSocial = partes[1].trim(); // Tomamos la razón social y eliminamos espacios
                comboBox.addItem(razonSocial); // Añadimos la razón social al combo box

            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void mSaveInformeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mSaveInformeMouseClicked
        // TODO add your handling code here:
        try {
            setInfo();

            if (!Cliente.equals("Seleccionar cliente")) {
                if (Cliente.isEmpty() || numInforme.isEmpty() || fechaInicio.isEmpty() || nameRes.isEmpty() || fechaFin.isEmpty() || ubicacion.isEmpty() || justificacion.isEmpty() || actividades.isEmpty() || numRes.isEmpty()) {
                    ConfirmSaveR();
                } else {
                    ConfirmSave();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Debe seleccionar un cliente valido");
            }

        } catch (Exception e) {

        }
    }//GEN-LAST:event_mSaveInformeMouseClicked

    private void deleteService() {
        String servicio = txtServicio.getText();
        if (servicio != null && !servicio.isEmpty()) {
            servicios.remove(servicio);
            updatePane(); // Actualizamos la lista visual
            JOptionPane.showMessageDialog(null, "Servicio eliminado.");
        } else {
            JOptionPane.showMessageDialog(null, "El campo esta vacio.");
        }
    }

    // Método para actualizar un servicio
    private void updateService() {
        String servicio = txtServicio.getText().trim();

        if (!servicio.isEmpty()) {
            // Opciones a mostrar
            String[] opciones = {"Cambiar Nombre", "Cambiar Descripción", "Cancelar"};

            // Mostrar el OptionDialog
            int seleccion = JOptionPane.showOptionDialog(
                    null,
                    "Seleccione una opción:",
                    "Opciones de Servicio",
                    JOptionPane.DEFAULT_OPTION,
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    opciones,
                    opciones[0]
            );

            // Procesar la selección
            switch (seleccion) {
                case 0 -> {
                    // Cambiar Nombre
                    String newServ = JOptionPane.showInputDialog(null, "Ingrese un valor:", "Entrada de valor", JOptionPane.PLAIN_MESSAGE);
                    if (!newServ.isEmpty()) {
                        servicios.put(newServ, servicios.get(servicio)); // Añadimos el actualizado
                        servicios.remove(servicio);  // Eliminamos el anterior
                        updatePane();
                        txtServicio.setText("");
                    } else {
                        JOptionPane.showMessageDialog(null, "Seleccione un servicio y escriba el nuevo nombre.");
                    }
                }

                case 1 -> {
                    // Cambiar Descripción
                    servicios.remove(servicio);
                    addService(servicio);
                    updatePane();
                }

                case 2 -> // Cancelar
                    System.out.println("Operación cancelada.");

                default ->
                    System.out.println("No se seleccionó ninguna opción.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un servicio");
        }

    }

    private void updatePane() {
        this.paneServices.removeAll();

        for (Map.Entry<String, File[]> entry : servicios.entrySet()) {
            JLabel lblService = new JLabel();
            String servicioPrestado = entry.getKey();
            File[] selectedFiles = entry.getValue();

            lblService.setText(servicioPrestado + " : " + "(" + selectedFiles.length + " archivos adjuntos)");
            this.paneServices.add(lblService);
        }
        this.paneServices.revalidate();
    }

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        deleteService();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        updateService();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void mNewInformeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mNewInformeMouseClicked
        // TODO add your handling code here:
        String v = "";
        txtNumInforme.setText(v);
        txtUbicacion.setText(v);
        txtJustificacion.setText(v);
        txtActividades.setText(v);
        txtNameRes.setText(v);
        txtNumRes.setText(v);
        txtServicio.setText(v);
        cbxCliente.setSelectedIndex(0);
        dateInicio.setDate(null);
        dateFin.setDate(null);

        servicios.clear();
        this.paneServices.removeAll();
        this.paneServices.repaint();
    }//GEN-LAST:event_mNewInformeMouseClicked

    private void mDownloadPDFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mDownloadPDFMouseClicked
        // TODO add your handling code here:
        File file = selectSaveLocation();
        imprimir(file);
    }//GEN-LAST:event_mDownloadPDFMouseClicked

    private void mCreateClientMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mCreateClientMouseClicked
        // TODO add your handling code here:
        ClientCreation view = new ClientCreation();
        view.setVisible(true);
        this.hide();
    }//GEN-LAST:event_mCreateClientMouseClicked

    private void mostrarPdfEnVentana(PDDocument document) throws IOException {
        // Crear un JDialog para mostrar las imágenes
        JDialog dialogo = new JDialog();
        dialogo.setTitle("Vista previa del PDF");
        dialogo.setSize(600, 800);
        dialogo.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        dialogo.setLocationRelativeTo(null);

        // Crear un JPanel para contener las imágenes
        JPanel panelImagenes = new JPanel();
        panelImagenes.setLayout(new BoxLayout(panelImagenes, BoxLayout.Y_AXIS)); // Para apilar verticalmente

        // Renderizar cada página y añadirla al panel
        PDFRenderer pdfRenderer = new PDFRenderer(document);
        for (int i = 0; i < document.getNumberOfPages(); i++) {
            BufferedImage image = pdfRenderer.renderImageWithDPI(i, 100); // Renderizar a 100 DPI
            ImageIcon icono = new ImageIcon(image.getScaledInstance(600, -1, java.awt.Image.SCALE_SMOOTH)); // Ajustar el ancho y mantener la relación de aspecto
            JLabel etiquetaImagen = new JLabel(icono);
            panelImagenes.add(etiquetaImagen); // Añadir la imagen al panel
        }

        // Añadir el panel de imágenes a un JScrollPane para permitir el desplazamiento
        JScrollPane scrollPane = new JScrollPane(panelImagenes);
        dialogo.add(scrollPane);

        // Hacer el diálogo modal
        dialogo.setModal(true);

        // Mostrar el diálogo
        dialogo.setVisible(true);
    }

    private void mPreviewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mPreviewMouseClicked
        // TODO add your handling code here:
        try {
            // Cargar el documento PDF
            File file = new File("temp/informe.pdf");
            imprimir(file);
            PDDocument document = PDDocument.load(file);


            // Mostrar el PDF en una ventana
            mostrarPdfEnVentana(document);

            document.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_mPreviewMouseClicked

    /**
     *
     * @param workDirection
     * @param email
     * @param responsableName
     * @param socialReason
     * @param FinishDateText
     * @param StartDateText
     * @param workId
     */
    public void AddLine(String workDirection, String email, String responsableName, String socialReason, String FinishDateText,
            String StartDateText, String workId) {
        try (FileWriter fw = new FileWriter("clients.txt", true)) {
            PrintWriter pw = new PrintWriter(fw);
            pw.println(responsableName + ";" + workId + ";" + email + ";" + socialReason + ";" + workDirection + ";" + StartDateText + ";"
                    + FinishDateText);
        } catch (IOException e) {

        }
    }

    /**
     *
     * @return
     */
    public File selectSaveLocation() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Guardar PDF");
        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivo PDF", "pdf"));
        fileChooser.setSelectedFile(new File("informe de obra.pdf")); // Nombre por defecto

        int userSelection = fileChooser.showSaveDialog(null);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            return fileChooser.getSelectedFile();
        } else {
            System.out.println("No se seleccionó ninguna ubicación para guardar el archivo.");
            return null;
        }
    }

    public void headerPDF(Document document) {
        try {
            // Crear una tabla con 3 columnas
            PdfPTable table = new PdfPTable(3);
            table.setWidthPercentage(100); // Ancho de la tabla
            table.setWidths(new float[]{1, 1, 1}); // Definir el ancho de las columnas

            // Imagen del logo
            com.itextpdf.text.Image logo = com.itextpdf.text.Image.getInstance("src\\main\\java\\com\\mycompany\\fula_constructor_s\\a\\s\\img/Recurso 2.png");  // Cambia la ruta por tu imagen
            logo.scaleToFit(100, 50);
            PdfPCell cell1 = new PdfPCell(logo);
            cell1.setBorder(PdfPCell.BOX);
            cell1.setBackgroundColor(BaseColor.LIGHT_GRAY);
            cell1.setHorizontalAlignment(Element.ALIGN_CENTER);  // Centrar la imagen en la celda
            cell1.setVerticalAlignment(Element.ALIGN_MIDDLE);
            table.addCell(cell1);

            // Celda de texto del título
            PdfPCell cell2 = new PdfPCell(new Paragraph("INFORME DE VISITA TÉCNICA", titleFont));
            cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell2.setVerticalAlignment(Element.ALIGN_MIDDLE);
            cell2.setBorder(PdfPCell.BOX);
            cell2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            table.addCell(cell2);

            // Crear una tabla interna para la celda 3
            PdfPTable innerTable = new PdfPTable(1);
            innerTable.setWidthPercentage(100);

            // Celda para la fecha
            PdfPCell fechaCell = new PdfPCell(new Paragraph(lblToday.getText(), normalBoldFont));
            fechaCell.setBorder(PdfPCell.BOX);
            fechaCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            innerTable.addCell(fechaCell);

            // Celda para la versión
            PdfPCell versionLabelCell = new PdfPCell(new Paragraph("VERSIÓN", normalBoldFont));
            versionLabelCell.setBorder(PdfPCell.BOX);
            versionLabelCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            innerTable.addCell(versionLabelCell);

            // Celda para el número de versión
            PdfPCell versionNumberCell = new PdfPCell(new Paragraph("1", normalBoldFont));
            versionNumberCell.setBorder(PdfPCell.BOX);
            versionNumberCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            innerTable.addCell(versionNumberCell);

            // Añadir la tabla interna a la celda 3
            PdfPCell cell3 = new PdfPCell(innerTable);
            cell3.setBorder(PdfPCell.NO_BORDER);
            cell3.setBackgroundColor(BaseColor.LIGHT_GRAY);
            table.addCell(cell3);

            // Segunda fila
            PdfPTable innerTable2 = new PdfPTable(1);
            PdfPCell number = new PdfPCell(new Paragraph("ORDEN DE OBRA No", normalBoldFont));
            innerTable2.addCell(number);
            PdfPCell ubic = new PdfPCell(new Paragraph("UBICACIÓN", normalBoldFont));
            innerTable2.addCell(ubic);
            PdfPCell cell4 = new PdfPCell(innerTable2);
            cell4.setBorder(PdfPCell.NO_BORDER);
            cell4.setBackgroundColor(BaseColor.LIGHT_GRAY);
            table.addCell(cell4);

            PdfPTable innerTable3 = new PdfPTable(1);
            PdfPCell numberO = new PdfPCell(new Paragraph(txtNumInforme.getText(), normalBoldFont));
            numberO.setHorizontalAlignment(Element.ALIGN_CENTER);
            innerTable3.addCell(numberO);
            PdfPCell ubicO = new PdfPCell(new Paragraph(txtUbicacion.getText(), normalFont));
            ubicO.setHorizontalAlignment(Element.ALIGN_CENTER);
            innerTable3.addCell(ubicO);
            PdfPCell cell5 = new PdfPCell(innerTable3);
            cell5.setBorder(PdfPCell.NO_BORDER);
            table.addCell(cell5);

            PdfPTable innerTable4 = new PdfPTable(1);
            PdfPTable innerTable41 = new PdfPTable(2);
            PdfPCell fechai = new PdfPCell(new Paragraph("FECHA INICIO:", normalBoldFont));
            fechai.setBackgroundColor(BaseColor.LIGHT_GRAY);
            innerTable41.addCell(fechai);
            PdfPCell fechaiO = new PdfPCell(new Paragraph(formato.format(dateInicio.getDate()), normalFont));
            fechaiO.setHorizontalAlignment(Element.ALIGN_CENTER);
            innerTable41.addCell(fechaiO);
            PdfPCell cellfecha = new PdfPCell(innerTable41);
            cellfecha.setBorder(PdfPCell.NO_BORDER);
            innerTable4.addCell(cellfecha);

            PdfPTable innerTable42 = new PdfPTable(2);
            PdfPCell fechaf = new PdfPCell(new Paragraph("FECHA FINAL:", normalBoldFont));
            fechaf.setBackgroundColor(BaseColor.LIGHT_GRAY);
            innerTable42.addCell(fechaf);
            PdfPCell fechafO = new PdfPCell(new Paragraph(formato.format(dateFin.getDate()), normalFont));
            fechafO.setHorizontalAlignment(Element.ALIGN_CENTER);
            innerTable42.addCell(fechafO);
            PdfPCell cellfechaf = new PdfPCell(innerTable42);
            cellfechaf.setBorder(PdfPCell.NO_BORDER);
            innerTable4.addCell(cellfechaf);

            PdfPCell cell6 = new PdfPCell(innerTable4);
            cell6.setBorder(PdfPCell.NO_BORDER);
            table.addCell(cell6);

            document.add(table);

            // Tercera fila
            PdfPTable table2 = new PdfPTable(2);
            table2.setWidthPercentage(100);
            table2.setWidths(new float[]{1, 2});

            PdfPCell cell7 = new PdfPCell(new Paragraph("JUSTIFICACIÓN DEL TRABAJO", normalBoldFont));
            cell7.setBackgroundColor(BaseColor.LIGHT_GRAY);
            table2.addCell(cell7);
            PdfPCell cell8 = new PdfPCell(new Paragraph(txtJustificacion.getText(), normalFont));
            cell8.setHorizontalAlignment(Element.ALIGN_CENTER);
            table2.addCell(cell8);

            PdfPCell cell9 = new PdfPCell(new Paragraph("ACTIVIDADES", normalBoldFont));
            cell9.setBackgroundColor(BaseColor.LIGHT_GRAY);
            table2.addCell(cell9);
            PdfPCell cell10 = new PdfPCell(new Paragraph(txtActividades.getText(), normalBoldFont));
            cell10.setHorizontalAlignment(Element.ALIGN_CENTER);
            table2.addCell(cell10);

            document.add(table2);

        } catch (DocumentException | IOException e) {
            e.printStackTrace();
        }
    }

    public void body1PDF(Document document, String servicioPrestado, File[] selectedFiles, int ref) {
        PdfPTable tablename = new PdfPTable(1);
        tablename.setWidthPercentage(100);
        tablename.setPaddingTop(12);

        PdfPCell space = new PdfPCell(new Paragraph(" ", normalBoldFont));
        //space.setPadding(5);
        space.setBorder(PdfPCell.NO_BORDER);
        tablename.addCell(space);

        // Crear la tabla principal
        PdfPTable table = new PdfPTable(3);
        // Crear la tabla principal
        PdfPTable tablenam = new PdfPTable(1);

        // Create the cell with the service name
        PdfPCell nameserv = new PdfPCell(new Paragraph(ref + ". " + servicioPrestado, normalBoldFont));
        nameserv.setHorizontalAlignment(Element.ALIGN_CENTER);
        nameserv.setBackgroundColor(BaseColor.LIGHT_GRAY);

        // Add the nameserv cell to the tablename
        tablename.addCell(nameserv);

        try {
            // ... other code to add images or tables
            document.add(tablenam);
        } catch (DocumentException ex) {
            Logger.getLogger(frontInformes.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            document.add(tablename);
        } catch (DocumentException ex) {
            Logger.getLogger(CreatePDFExample.class.getName()).log(Level.SEVERE, null, ex);
        }

        // Crear una tabla de 3 columnas para las imágenes (independiente de cuántas imágenes se seleccionen)
        int col = (selectedFiles.length / 10) + 4;
        PdfPTable imageTable = new PdfPTable(col);
        imageTable.setWidthPercentage(100); // Ajustar el ancho de la tabla
        try {
            imageTable.setWidths(new float[]{});  // Definir los anchos de las columnas
        } catch (DocumentException e) {
            e.printStackTrace();
        }

        // Agregar las imágenes seleccionadas a la tabla
        for (File file : selectedFiles) {
            try {
                Image img = Image.getInstance(file.getAbsolutePath());

                // Controlar mejor la escala de las imágenes
                float maxWidth = 100;  // Ancho máximo permiøtido
                float maxHeight = 50; // Alto máximo permitido
                float width = img.getWidth();
                float height = img.getHeight();

                // Calcular la relación de escala manteniendo el aspecto de la imagen
                float scaleFactor = Math.min(maxWidth / width, maxHeight / height);
                img.scaleAbsolute(width * scaleFactor, height * scaleFactor);

                PdfPCell imageCell = new PdfPCell(img, true);
                imageCell.setPadding(5);
                imageCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                imageCell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                imageTable.addCell(imageCell);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        // Si el número de imágenes seleccionadas no llena todas las columnas, agregar celdas vacías
        int remainingCells = (col - (selectedFiles.length % col)) % col;
        if (remainingCells != 0) {  // Solo añadir celdas vacías si es necesario
            for (int i = 0; i < remainingCells; i++) {
                imageTable.addCell(new PdfPCell());
            }
        }

        try {
            document.add(imageTable);  // Agregar la tabla de imágenes al documento
        } catch (DocumentException e) {
            e.printStackTrace();
        }
    }

    public void body2PDF(Document document) throws IOException {
        try {
            PdfPTable table = new PdfPTable(1);
            table.setWidthPercentage(100);
            table.setPaddingTop(12);

            PdfPCell space = new PdfPCell(new Paragraph(" ", normalBoldFont));
            //space.setPadding(5);
            space.setBorder(PdfPCell.NO_BORDER);
            table.addCell(space);

            PdfPCell title1 = new PdfPCell(new Paragraph("DE MANERA ADICIONAL A LA ENTREGA:", normalBoldFont));
            table.addCell(title1);

            PdfPCell space2 = new PdfPCell(new Paragraph(" ", normalBoldFont));
            table.addCell(space2);

            PdfPCell title2 = new PdfPCell(new Paragraph("DOCUMENTACIÓN ENTREGADA", normalBoldFont));
            table.addCell(title2);

            PdfPCell cot = new PdfPCell(new Paragraph("Cotización", normalFont));
            table.addCell(cot);

            PdfPCell arl = new PdfPCell(new Paragraph("Certificado ARL vigente titular y subcontratistas y/o dependientes", normalFont));
            table.addCell(arl);

            PdfPCell afp = new PdfPCell(new Paragraph("Certificado AFP vigente titular y subcontratistas y/o dependientes", normalFont));
            table.addCell(afp);

            PdfPCell eps = new PdfPCell(new Paragraph("Certificado EPS vigente titular y subcontratistas y/o dependientes", normalFont));
            table.addCell(eps);

            PdfPCell ca = new PdfPCell(new Paragraph("Carnet manejo de alturas", normalFont));
            table.addCell(ca);

            PdfPCell er = new PdfPCell(new Paragraph("Certificado de existencia y representación legal", normalFont));
            table.addCell(er);

            PdfPCell cb = new PdfPCell(new Paragraph("Certificación bancaria", normalFont));
            table.addCell(cb);

            PdfPCell factura = new PdfPCell(new Paragraph("Factura", normalFont));
            table.addCell(factura);

            PdfPCell title3 = new PdfPCell(new Paragraph("VALIDACIÓN DE VISITA", normalBoldFont));
            table.addCell(title3);

            PdfPTable innerTable = new PdfPTable(1);
            innerTable.setWidthPercentage(100);

            innerTable.addCell(space);

            PdfPCell val = new PdfPCell(new Paragraph("Válido la visita correspondiente, del proveedor o contratista FULA CONSTRUCTOR S.A.S., visita que fue bajo mi supervisión, para dar claridad de lo necesitado.", normalFont));
            val.setBorder(PdfPCell.NO_BORDER);
            innerTable.addCell(val);

            innerTable.addCell(space);

            PdfPCell att = new PdfPCell(new Paragraph("Atentamente:", normalFont));
            att.setBorder(PdfPCell.NO_BORDER);
            innerTable.addCell(att);

            PdfPCell namer = new PdfPCell(new Paragraph("Nombre: " + nameRes, normalFont));
            namer.setBorder(PdfPCell.NO_BORDER);
            innerTable.addCell(namer);

            PdfPCell numr = new PdfPCell(new Paragraph("Telefono: " + numRes, normalFont));
            numr.setBorder(PdfPCell.NO_BORDER);
            innerTable.addCell(numr);

            innerTable.addCell(space);

            PdfPTable firmas = new PdfPTable(2);
            firmas.setWidthPercentage(100);

            PdfPCell firmaR = new PdfPCell(new Paragraph(" ", normalFont));
            firmas.addCell(firmaR);

            com.itextpdf.text.Image firmaImg = com.itextpdf.text.Image.getInstance("src\\main\\java\\com\\mycompany\\fula_constructor_s\\a\\s\\img/firma.png");  // Cambia la ruta por tu imagen
            firmaImg.scaleToFit(100, 50);
            PdfPCell cell1 = new PdfPCell(firmaImg);
            cell1.setHorizontalAlignment(Element.ALIGN_CENTER);  // Centrar la imagen en la celda
            cell1.setVerticalAlignment(Element.ALIGN_MIDDLE);
            firmas.addCell(cell1);

            PdfPCell firmaRN = new PdfPCell(new Paragraph("FIRMA RECIBIDO", normalFont));
            firmaRN.setHorizontalAlignment(Element.ALIGN_CENTER);
            firmas.addCell(firmaRN);

            PdfPCell firmaGN = new PdfPCell(new Paragraph("HEYESMID FULA MONTENEGRO\nGERENTE", normalFont));
            firmaGN.setHorizontalAlignment(Element.ALIGN_CENTER);
            firmas.addCell(firmaGN);

            PdfPCell cfirmas = new PdfPCell(firmas);
            innerTable.addCell(cfirmas);

            PdfPCell validate = new PdfPCell(innerTable);
            table.addCell(validate);

            document.add(table);
        } catch (DocumentException ex) {
            Logger.getLogger(frontInformes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void imprimir(File file) {

        setInfo();

        if (file == null) {
            return;  // Salir si no se seleccionó ubicación para guardar el archivo
        }

        try {
            // Crear el documento
            Document document = new Document();

            // Crear el PdfWriter con la ubicación seleccionada
            PdfWriter.getInstance(document, new FileOutputStream(file));

            // Abrir el documento
            document.open();

            int c = 1;

            for (Map.Entry<String, File[]> entry : servicios.entrySet()) {
                // Obtener el servicio y los archivos
                String servicioPrestado = entry.getKey();
                File[] selectedFiles = entry.getValue();

                headerPDF(document);

                // Llamar a la función que crea el cuerpo para cada servicio
                body1PDF(document, servicioPrestado, selectedFiles, c);
                c += 1;

                // Agregar una nueva página después de cada servicio si es necesario
                document.newPage();
            }

            headerPDF(document);
            body2PDF(document);
            // Cerrar el documento
            document.close();

            System.out.println("PDF creado exitosamente.");

        } catch (DocumentException | IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frontInformes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frontInformes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frontInformes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frontInformes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frontInformes().setVisible(true);
            }
        });
    }

    private void setLogo(JLabel img, String root) {
        this.image = new ImageIcon(root);
        this.icon = new ImageIcon(this.image.getImage().getScaledInstance(img.getWidth(), img.getHeight(), java.awt.Image.SCALE_SMOOTH));
        img.setIcon(this.icon);
        this.repaint();
    }

    private void setInfo(JLabel fechaH) {
        LocalDate hoy = LocalDate.now();

        DateTimeFormatter format = DateTimeFormatter.ofPattern("dd/MM/yyyy");

        String hoyff = hoy.format(format);

        fechaH.setText(hoyff);
    }

    private void setButtonsEv(int num, JPanel pane) {
        for (int i = 0; i < num; i++) {
            JButton btn = new JButton();
            btn.setText("Actividad " + i);
            pane.add(btn);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cbxCliente;
    private com.toedter.calendar.JDateChooser dateFin;
    private com.toedter.calendar.JDateChooser dateInicio;
    private javax.swing.JLabel imgLogo;
    private com.toedter.calendar.JCalendar jCalendar1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblToday;
    private javax.swing.JMenu mCreateClient;
    private javax.swing.JMenu mDownloadPDF;
    private javax.swing.JMenu mNewInforme;
    private javax.swing.JMenu mPreview;
    private javax.swing.JMenu mSaveInforme;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JPanel paneActivitys1;
    private javax.swing.JScrollPane paneScroll;
    private javax.swing.JPanel paneServices;
    private javax.swing.JTextField txtActividades;
    private javax.swing.JTextArea txtJustificacion;
    private javax.swing.JTextField txtNameRes;
    private javax.swing.JTextField txtNumInforme;
    private javax.swing.JTextField txtNumRes;
    private javax.swing.JTextField txtServicio;
    private javax.swing.JTextField txtUbicacion;
    // End of variables declaration//GEN-END:variables

}
